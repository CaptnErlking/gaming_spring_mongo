import { AuthUser, LoginRequest, RegisterRequest, UserRole } from '../types';
import { apiService } from './api';
import toast from 'react-hot-toast';
import { QueryClient } from '@tanstack/react-query';

const queryClient = new QueryClient();

class AuthService {
  private currentUser: AuthUser | null = null;

  constructor() {
    this.restoreSession();
  }

  private restoreSession() {
    const savedUser = localStorage.getItem('current_user');
    const savedToken = localStorage.getItem('auth_token');
    
    if (savedUser && savedToken) {
      try {
        this.currentUser = JSON.parse(savedUser);
      } catch (error) {
        console.error('Failed to restore user session:', error);
        this.clearSession();
      }
    }
  }

  private saveSession(user: AuthUser, token: string) {
    localStorage.setItem('current_user', JSON.stringify(user));
    localStorage.setItem('auth_token', token);
  }

  private clearSession() {
    localStorage.removeItem('current_user');
    localStorage.removeItem('auth_token');
    this.currentUser = null;
  }

  async login(credentials: LoginRequest): Promise<AuthUser> {
    try {
      // For demo, find a matching user (replace with real API call)
      const mockUser = credentials.role === 'ADMIN' ? {
        id: '1',
        name: 'Admin User',
        email: 'admin@gamingclub.com',
        phoneNumber: credentials.phoneNumber,
        role: 'ADMIN',
        balance: 10000,
      } : {
        id: '2',
        name: 'Demo User',
        email: 'user@gamingclub.com',
        phoneNumber: credentials.phoneNumber,
        role: 'USER',
        balance: 0,
      };

      const token = `token_${mockUser.id}_${Date.now()}`;
      this.currentUser = mockUser;
      this.saveSession(mockUser, token);
      
      toast.success(`Welcome back, ${mockUser.name}!`);
      return mockUser;
    } catch (error: any) {
      toast.error(error.message || 'Login failed');
      throw error;
    }
  }

  async register(userData: RegisterRequest): Promise<AuthUser> {
    try {
      // Create member in the backend
      const response = await apiService.createMember({
        name: userData.name,
        phoneNumber: userData.phoneNumber,
        email: userData.email,
        role: 'USER',
        balance: 0
      });

      const user = {
        id: response.id,
        name: response.name,
        phoneNumber: response.phoneNumber,
        email: response.email,
        role: response.role as UserRole,
        balance: response.balance
      };

      // Save user session
      const token = `token_${user.id}_${Date.now()}`;
      this.saveSession(user, token);
      this.currentUser = user;

      // Invalidate members query to update admin's member list
      queryClient.invalidateQueries({ queryKey: ['members'] });
      
      toast.success(`Welcome to Gaming Club, ${user.name}!`);
      return user;
    } catch (error: any) {
      toast.error(error.message || 'Registration failed');
      throw error;
    }
  }

  async logout(): Promise<void> {
    this.clearSession();
    toast.success('Logged out successfully');
  }

  getCurrentUser(): AuthUser | null {
    return this.currentUser;
  }

  isAuthenticated(): boolean {
    return this.currentUser !== null;
  }

  hasRole(role: UserRole): boolean {
    return this.currentUser?.role === role;
  }

  isAdmin(): boolean {
    return this.hasRole('ADMIN');
  }

  isUser(): boolean {
    return this.hasRole('USER');
  }

  updateUserBalance(newBalance: number): void {
    if (this.currentUser) {
      this.currentUser.balance = newBalance;
      this.saveSession(this.currentUser, localStorage.getItem('auth_token') || '');
      // Invalidate relevant queries
      if (this.currentUser.id) {
        queryClient.invalidateQueries({ queryKey: ['members', this.currentUser.id] });
        queryClient.invalidateQueries({ queryKey: ['recharges', 'member', this.currentUser.id] });
      }
    }
  }
}

// Create singleton instance
export const authService = new AuthService();
export default authService;