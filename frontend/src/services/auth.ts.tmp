import { AuthUser, LoginRequest, RegisterRequest, UserRole } from '../types';
import { apiService } from './api';
import toast from 'react-hot-toast';
import { QueryClient } from '@tanstack/react-query';

const queryClient = new QueryClient();

class AuthService {
  private currentUser: AuthUser | null = null;

  constructor() {
    this.restoreSession();
  }

  private restoreSession() {
    const savedUser = localStorage.getItem('current_user');
    const savedToken = localStorage.getItem('auth_token');
    
    if (savedUser && savedToken) {
      try {
        this.currentUser = JSON.parse(savedUser);
      } catch (error) {
        console.error('Failed to restore user session:', error);
        this.clearSession();
      }
    }
  }

  private saveSession(user: AuthUser, token: string) {
    localStorage.setItem('current_user', JSON.stringify(user));
    localStorage.setItem('auth_token', token);
  }

  private clearSession() {
    localStorage.removeItem('current_user');
    localStorage.removeItem('auth_token');
    this.currentUser = null;
  }

  async login(credentials: LoginRequest): Promise<AuthUser> {
    try {
      // For demo, using hardcoded admin/user until backend auth is implemented
      if (credentials.role === 'ADMIN' && credentials.phoneNumber === '1234567890') {
        const adminUser = {
          id: '1',
          name: 'Admin User',
          email: 'admin@gamingclub.com',
          phoneNumber: credentials.phoneNumber,
          role: 'ADMIN' as UserRole,
          balance: 10000,
        };
        
        const token = `token_${adminUser.id}_${Date.now()}`;
        this.currentUser = adminUser;
        this.saveSession(adminUser, token);
        
        toast.success(`Welcome back, ${adminUser.name}!`);
        return adminUser;
      }

      // Create a demo user for any other login
      const demoUser = {
        id: Date.now().toString(),
        name: 'Demo User',
        email: `user${Date.now()}@gamingclub.com`,
        phoneNumber: credentials.phoneNumber,
        role: 'USER' as UserRole,
        balance: 0,
      };

      const token = `token_${demoUser.id}_${Date.now()}`;
      this.currentUser = demoUser;
      this.saveSession(demoUser, token);
      
      toast.success(`Welcome back, ${demoUser.name}!`);
      return demoUser;
    } catch (error: any) {
      toast.error(error.message || 'Login failed');
      throw error;
    }
  }

  async register(userData: RegisterRequest): Promise<AuthUser> {
    try {
      const newUser = {
        id: Date.now().toString(),
        name: userData.name,
        phoneNumber: userData.phoneNumber,
        email: userData.email,
        role: 'USER' as UserRole,
        balance: 0
      };

      // In a real app, this would be an API call to create the user
      // For now, we'll simulate a successful registration
      const token = `token_${newUser.id}_${Date.now()}`;
      this.saveSession(newUser, token);
      this.currentUser = newUser;

      // Simulate API call and update member list
      await apiService.createMember(newUser);
      queryClient.invalidateQueries({ queryKey: ['members'] });
      
      toast.success(`Welcome to Gaming Club, ${newUser.name}!`);
      return newUser;
    } catch (error: any) {
      toast.error(error.message || 'Registration failed');
      throw error;
    }
  }

  async logout(): Promise<void> {
    this.clearSession();
    toast.success('Logged out successfully');
  }

  getCurrentUser(): AuthUser | null {
    return this.currentUser;
  }

  isAuthenticated(): boolean {
    return this.currentUser !== null;
  }

  hasRole(role: UserRole): boolean {
    return this.currentUser?.role === role;
  }

  isAdmin(): boolean {
    return this.hasRole('ADMIN');
  }

  isUser(): boolean {
    return this.hasRole('USER');
  }

  updateUserBalance(newBalance: number): void {
    if (this.currentUser) {
      this.currentUser.balance = newBalance;
      this.saveSession(this.currentUser, localStorage.getItem('auth_token') || '');
      // Invalidate relevant queries
      if (this.currentUser.id) {
        queryClient.invalidateQueries({ queryKey: ['members', this.currentUser.id] });
        queryClient.invalidateQueries({ queryKey: ['recharges', 'member', this.currentUser.id] });
      }
    }
  }
}

// Create singleton instance
export const authService = new AuthService();
export default authService;